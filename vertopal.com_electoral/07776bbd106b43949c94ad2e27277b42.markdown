---
jupyter:
  colab:
  kaggle:
    accelerator: none
    dataSources:
    - datasetId: 4599616
      sourceId: 7984951
      sourceType: datasetVersion
    dockerImageVersionId: 30673
    isGpuEnabled: false
    isInternetEnabled: true
    language: python
    sourceType: notebook
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.10.13
  nbformat: 4
  nbformat_minor: 0
---

::: {.cell .code execution="{\"iopub.execute_input\":\"2024-04-17T14:11:12.101776Z\",\"iopub.status.busy\":\"2024-04-17T14:11:12.100713Z\",\"iopub.status.idle\":\"2024-04-17T14:11:14.087898Z\",\"shell.execute_reply\":\"2024-04-17T14:11:14.086591Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:12.101740Z\"}" id="Y4DPfms28iJ2" trusted="true"}
``` python
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
```
:::

::: {.cell .code id="sWVJdl-d1Vem"}
``` python
plt.style.use('ggplot')
```
:::

::: {.cell .markdown id="N1DuO_VM8_Wb"}
## Import Dataset for buyer
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":206}" execution="{\"iopub.execute_input\":\"2024-04-17T14:11:14.091690Z\",\"iopub.status.busy\":\"2024-04-17T14:11:14.090624Z\",\"iopub.status.idle\":\"2024-04-17T14:11:14.235978Z\",\"shell.execute_reply\":\"2024-04-17T14:11:14.234919Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:14.091624Z\"}" id="RnToJZu88iJ5" outputId="25873367-ea56-4d34-9fb0-51ae5329b8d3" trusted="true"}
``` python
buyer_df = pd.read_csv('/content/sample_data/EB_Purchases_Updated.csv')
buyer_df.drop('Sr No.', axis=1, inplace=True)
buyer_df.head()
```

::: {.output .execute_result execution_count="246"}
``` json
{"summary":"{\n  \"name\": \"buyer_df\",\n  \"rows\": 18871,\n  \"fields\": [\n    {\n      \"column\": \"Reference No (URN)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"1202210000000000000\",\n          \"800202000000000000000\",\n          \"1202200000000000000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Journal Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"7-Apr-21\",\n          \"21-Jan-23\",\n          \"18-Jan-20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Purchase\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"7-Apr-21\",\n          \"21-Jan-23\",\n          \"18-Jan-20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Expiry\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"21-Apr-21\",\n          \"4-Feb-23\",\n          \"1-Feb-20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name of the Purchaser\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1320,\n        \"samples\": [\n          \"14 REELS PLUS LLP\",\n          \"GREENKO SRI SAI KRISHNA HYDRO ENERGIES PVT LTD\",\n          \"PALM SHELTER ESTATE DEVELOPMENT LLP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prefix\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"OL\",\n          \"TT\",\n          \"OC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bond Number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6573,\n        \"min\": 8,\n        \"max\": 71548,\n        \"num_unique_values\": 14491,\n        \"samples\": [\n          29541,\n          15644,\n          28838\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"1,00,000\",\n          \"10000\",\n          \"1,00,00,000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Branch Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 395,\n        \"min\": 1,\n        \"max\": 1355,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          1,\n          813,\n          941\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Teller\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1825394,\n        \"min\": 1013030,\n        \"max\": 8492239,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          7430841,\n          6830668,\n          6422705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Expired\",\n          \"Paid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"buyer_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\"}" execution="{\"iopub.execute_input\":\"2024-04-17T14:11:14.325793Z\",\"iopub.status.busy\":\"2024-04-17T14:11:14.325028Z\",\"iopub.status.idle\":\"2024-04-17T14:11:14.381025Z\",\"shell.execute_reply\":\"2024-04-17T14:11:14.379102Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:14.325750Z\"}" id="ZRSHsLvS8iJ_" outputId="85b1548a-dd9d-4bf8-84d4-267ebc226504" trusted="true"}
``` python
buyer_df.info()
```

::: {.output .stream .stdout}
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 18871 entries, 0 to 18870
    Data columns (total 11 columns):
     #   Column                 Non-Null Count  Dtype 
    ---  ------                 --------------  ----- 
     0   Reference No (URN)     18871 non-null  object
     1   Journal Date           18871 non-null  object
     2   Date of Purchase       18871 non-null  object
     3   Date of Expiry         18871 non-null  object
     4   Name of the Purchaser  18871 non-null  object
     5   Prefix                 18871 non-null  object
     6   Bond Number            18871 non-null  int64 
     7   Denominations (INR)    18871 non-null  object
     8   Issue Branch Code      18871 non-null  int64 
     9   Issue Teller           18871 non-null  int64 
     10  Status                 18871 non-null  object
    dtypes: int64(3), object(8)
    memory usage: 1.6+ MB
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":300}" execution="{\"iopub.execute_input\":\"2024-04-17T14:11:14.382998Z\",\"iopub.status.busy\":\"2024-04-17T14:11:14.382616Z\",\"iopub.status.idle\":\"2024-04-17T14:11:14.413836Z\",\"shell.execute_reply\":\"2024-04-17T14:11:14.412945Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:14.382968Z\"}" id="8AneTjS48iKC" outputId="a35c86fc-9a86-4d14-9bb9-8dbb768d5dfe" trusted="true"}
``` python
buyer_df.describe()
```

::: {.output .execute_result execution_count="248"}
``` json
{"summary":"{\n  \"name\": \"buyer_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Bond Number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22336.315083566995,\n        \"min\": 8.0,\n        \"max\": 71548.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12181.003338455832,\n          12350.0,\n          18871.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Branch Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6507.079753410633,\n        \"min\": 1.0,\n        \"max\": 18871.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          18871.0,\n          480.0655503152986,\n          813.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Teller\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3137486.5956623587,\n        \"min\": 18871.0,\n        \"max\": 8492239.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5895736.581792168,\n          6405134.0,\n          18871.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\"}" execution="{\"iopub.execute_input\":\"2024-04-17T14:11:14.416492Z\",\"iopub.status.busy\":\"2024-04-17T14:11:14.416046Z\",\"iopub.status.idle\":\"2024-04-17T14:11:14.444341Z\",\"shell.execute_reply\":\"2024-04-17T14:11:14.442916Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:14.416453Z\"}" id="da__U1BQ8iKF" outputId="9fac9cf2-f79c-430b-9923-de0e345261e4" trusted="true"}
``` python
buyer_df.isna().sum()
```

::: {.output .execute_result execution_count="249"}
    Reference No (URN)       0
    Journal Date             0
    Date of Purchase         0
    Date of Expiry           0
    Name of the Purchaser    0
    Prefix                   0
    Bond Number              0
    Denominations (INR)      0
    Issue Branch Code        0
    Issue Teller             0
    Status                   0
    dtype: int64
:::
:::

::: {.cell .markdown id="w4SwWy6D8iKH"}
Observation : No null values
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\"}" execution="{\"iopub.execute_input\":\"2024-04-17T14:11:14.447047Z\",\"iopub.status.busy\":\"2024-04-17T14:11:14.446270Z\",\"iopub.status.idle\":\"2024-04-17T14:11:14.458039Z\",\"shell.execute_reply\":\"2024-04-17T14:11:14.456321Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:14.446968Z\"}" id="WQlMPFo68iKK" outputId="33011cfc-5ae3-4be7-a580-e341061ebc6b" trusted="true"}
``` python
buyer_df.rename(mapper={'Reference No (URN)': 'rfno'}, axis=1, inplace=True)
buyer_df.columns
```

::: {.output .execute_result execution_count="250"}
    Index(['rfno', 'Journal Date', 'Date of Purchase', 'Date of Expiry',
           'Name of the Purchaser', 'Prefix', 'Bond Number', 'Denominations (INR)',
           'Issue Branch Code', 'Issue Teller', 'Status'],
          dtype='object')
:::
:::

::: {.cell .markdown id="k_Cr5RGe8iKM"}
Convert datatype of Journal Date, Date of Purchase and Date of Expiry to
datetime datatype.
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\"}" execution="{\"iopub.execute_input\":\"2024-04-17T14:11:14.461408Z\",\"iopub.status.busy\":\"2024-04-17T14:11:14.460181Z\",\"iopub.status.idle\":\"2024-04-17T14:11:14.494899Z\",\"shell.execute_reply\":\"2024-04-17T14:11:14.493184Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:14.461360Z\"}" id="MkL3TGQZ8iKO" outputId="681840d0-46c2-40cf-afc6-db3c2a2b3f0e" trusted="true"}
``` python
obj_col = ['Journal Date', 'Date of Purchase', 'Date of Expiry']
for col in obj_col:
    buyer_df[col] = pd.to_datetime(buyer_df[col], format="%d-%b-%y")

# Check datatype after transformation
for col in obj_col:
    print(buyer_df[col].dtype)
```

::: {.output .stream .stdout}
    datetime64[ns]
    datetime64[ns]
    datetime64[ns]
:::
:::

::: {.cell .code execution="{\"iopub.execute_input\":\"2024-04-17T14:11:14.497625Z\",\"iopub.status.busy\":\"2024-04-17T14:11:14.497131Z\",\"iopub.status.idle\":\"2024-04-17T14:11:14.504887Z\",\"shell.execute_reply\":\"2024-04-17T14:11:14.503008Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:14.497586Z\"}" id="wgmMil4h8iKQ" trusted="true"}
``` python
# buyer_df.sort_values(by='Date of Purchase', inplace=True)
```
:::

::: {.cell .markdown id="XXBUKwva8iKS"}
## Extract Year, Month, Day and Quarter from `Date of Purchase`
:::

::: {.cell .code execution="{\"iopub.execute_input\":\"2024-04-17T14:11:42.447684Z\",\"iopub.status.busy\":\"2024-04-17T14:11:42.447023Z\",\"iopub.status.idle\":\"2024-04-17T14:11:43.015320Z\",\"shell.execute_reply\":\"2024-04-17T14:11:43.014081Z\",\"shell.execute_reply.started\":\"2024-04-17T14:11:42.447651Z\"}" id="dHWRXFHY8iKS" trusted="true"}
``` python
buyer_df['Year'] = buyer_df['Date of Purchase'].dt.strftime('%Y')
buyer_df['Month'] = buyer_df['Date of Purchase'].dt.strftime('%m')
buyer_df['Day'] = buyer_df['Date of Purchase'].dt.strftime('%d')
buyer_df['Quarter'] = buyer_df['Date of Purchase'].dt.to_period('Q').dt.strftime('%Y-Q%q')
```
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":520}" execution="{\"iopub.execute_input\":\"2024-04-17T14:13:27.069680Z\",\"iopub.status.busy\":\"2024-04-17T14:13:27.069187Z\",\"iopub.status.idle\":\"2024-04-17T14:13:27.090075Z\",\"shell.execute_reply\":\"2024-04-17T14:13:27.089043Z\",\"shell.execute_reply.started\":\"2024-04-17T14:13:27.069647Z\"}" id="CYw5gVTX8iKT" outputId="65275949-5431-4b5e-ad72-652191170835" trusted="true"}
``` python
buyer_df.head(5).T
```

::: {.output .execute_result execution_count="254"}
``` json
{"summary":"{\n  \"name\": \"buyer_df\",\n  \"rows\": 18871,\n  \"fields\": [\n    {\n      \"column\": \"rfno\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"1202210000000000000\",\n          \"800202000000000000000\",\n          \"1202200000000000000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Journal Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-12 00:00:00\",\n        \"max\": \"2024-01-11 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-07 00:00:00\",\n          \"2023-01-21 00:00:00\",\n          \"2020-01-18 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Purchase\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-12 00:00:00\",\n        \"max\": \"2024-01-11 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-07 00:00:00\",\n          \"2023-01-21 00:00:00\",\n          \"2020-01-18 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Expiry\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-26 00:00:00\",\n        \"max\": \"2024-01-25 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-21 00:00:00\",\n          \"2023-02-04 00:00:00\",\n          \"2020-02-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name of the Purchaser\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1320,\n        \"samples\": [\n          \"14 REELS PLUS LLP\",\n          \"GREENKO SRI SAI KRISHNA HYDRO ENERGIES PVT LTD\",\n          \"PALM SHELTER ESTATE DEVELOPMENT LLP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prefix\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"OL\",\n          \"TT\",\n          \"OC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bond Number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6573,\n        \"min\": 8,\n        \"max\": 71548,\n        \"num_unique_values\": 14491,\n        \"samples\": [\n          29541,\n          15644,\n          28838\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"1,00,000\",\n          \"10000\",\n          \"1,00,00,000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Branch Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 395,\n        \"min\": 1,\n        \"max\": 1355,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          1,\n          813,\n          941\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Teller\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1825394,\n        \"min\": 1013030,\n        \"max\": 8492239,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          7430841,\n          6830668,\n          6422705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Expired\",\n          \"Paid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2019\",\n          \"2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"04\",\n          \"05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"08\",\n          \"03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quarter\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"2019-Q2\",\n          \"2019-Q3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"buyer_df"}
```
:::
:::

::: {.cell .markdown id="0mKYRM-D8iKV"}
Convert `Denominations (INR)` to int type
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\"}" execution="{\"iopub.execute_input\":\"2024-04-17T14:13:52.550666Z\",\"iopub.status.busy\":\"2024-04-17T14:13:52.550148Z\",\"iopub.status.idle\":\"2024-04-17T14:13:52.621380Z\",\"shell.execute_reply\":\"2024-04-17T14:13:52.620083Z\",\"shell.execute_reply.started\":\"2024-04-17T14:13:52.550620Z\"}" id="XaKMvVmx8iKV" outputId="d12927bd-d174-4bc2-a7c9-f2dff2d5c5c7" trusted="true"}
``` python
buyer_df['Denominations (INR)'] = buyer_df['Denominations (INR)'].apply(lambda x: x.replace(',', ''))
buyer_df['Denominations (INR)'] = pd.to_numeric(buyer_df['Denominations (INR)'])
buyer_df['Denominations (INR)'] = buyer_df['Denominations (INR)'].divide(10000000)
buyer_df.info()
```

::: {.output .stream .stdout}
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 18871 entries, 0 to 18870
    Data columns (total 15 columns):
     #   Column                 Non-Null Count  Dtype         
    ---  ------                 --------------  -----         
     0   rfno                   18871 non-null  object        
     1   Journal Date           18871 non-null  datetime64[ns]
     2   Date of Purchase       18871 non-null  datetime64[ns]
     3   Date of Expiry         18871 non-null  datetime64[ns]
     4   Name of the Purchaser  18871 non-null  object        
     5   Prefix                 18871 non-null  object        
     6   Bond Number            18871 non-null  int64         
     7   Denominations (INR)    18871 non-null  float64       
     8   Issue Branch Code      18871 non-null  int64         
     9   Issue Teller           18871 non-null  int64         
     10  Status                 18871 non-null  object        
     11  Year                   18871 non-null  object        
     12  Month                  18871 non-null  object        
     13  Day                    18871 non-null  object        
     14  Quarter                18871 non-null  object        
    dtypes: datetime64[ns](3), float64(1), int64(3), object(8)
    memory usage: 2.2+ MB
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":300}" execution="{\"iopub.execute_input\":\"2024-04-17T14:29:03.732083Z\",\"iopub.status.busy\":\"2024-04-17T14:29:03.731651Z\",\"iopub.status.idle\":\"2024-04-17T14:29:03.740533Z\",\"shell.execute_reply\":\"2024-04-17T14:29:03.739247Z\",\"shell.execute_reply.started\":\"2024-04-17T14:29:03.732052Z\"}" id="Ncxy-CcF8iKX" outputId="bafa7c58-82d7-4faf-fb1e-693d782dc5c9" trusted="true"}
``` python
buyer_df.describe()
```

::: {.output .execute_result execution_count="256"}
``` json
{"summary":"{\n  \"name\": \"buyer_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Journal Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000018871\",\n        \"max\": \"2024-01-11 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"18871\",\n          \"2022-03-15 00:27:55.714058496\",\n          \"2023-07-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Purchase\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000018871\",\n        \"max\": \"2024-01-11 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"18871\",\n          \"2022-03-15 00:28:27.763234304\",\n          \"2023-07-10 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Expiry\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000018871\",\n        \"max\": \"2024-01-25 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"18871\",\n          \"2022-03-29 00:28:27.763234304\",\n          \"2023-07-24 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bond Number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22336.315083566995,\n        \"min\": 8.0,\n        \"max\": 71548.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12181.003338455832,\n          14764.0,\n          18871.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6671.694008122826,\n        \"min\": 0.0001,\n        \"max\": 18871.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          18871.0,\n          0.6441372052355466,\n          0.45389468816250894\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Branch Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6507.079753410633,\n        \"min\": 1.0,\n        \"max\": 18871.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          18871.0,\n          480.0655503152986,\n          1355.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Teller\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3137486.595662359,\n        \"min\": 18871.0,\n        \"max\": 8492239.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5895736.581792168,\n          7273126.0,\n          18871.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":310}" execution="{\"iopub.execute_input\":\"2024-04-17T14:13:59.235044Z\",\"iopub.status.busy\":\"2024-04-17T14:13:59.234263Z\",\"iopub.status.idle\":\"2024-04-17T14:13:59.259150Z\",\"shell.execute_reply\":\"2024-04-17T14:13:59.257600Z\",\"shell.execute_reply.started\":\"2024-04-17T14:13:59.234998Z\"}" id="i46hqnyH8iKh" outputId="8a2e02c3-8848-4150-8df1-3ab484a45014" trusted="true"}
``` python
buyer_df.head()
```

::: {.output .execute_result execution_count="257"}
``` json
{"summary":"{\n  \"name\": \"buyer_df\",\n  \"rows\": 18871,\n  \"fields\": [\n    {\n      \"column\": \"rfno\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"1202210000000000000\",\n          \"800202000000000000000\",\n          \"1202200000000000000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Journal Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-12 00:00:00\",\n        \"max\": \"2024-01-11 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-07 00:00:00\",\n          \"2023-01-21 00:00:00\",\n          \"2020-01-18 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Purchase\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-12 00:00:00\",\n        \"max\": \"2024-01-11 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-07 00:00:00\",\n          \"2023-01-21 00:00:00\",\n          \"2020-01-18 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Expiry\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-26 00:00:00\",\n        \"max\": \"2024-01-25 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-21 00:00:00\",\n          \"2023-02-04 00:00:00\",\n          \"2020-02-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name of the Purchaser\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1320,\n        \"samples\": [\n          \"14 REELS PLUS LLP\",\n          \"GREENKO SRI SAI KRISHNA HYDRO ENERGIES PVT LTD\",\n          \"PALM SHELTER ESTATE DEVELOPMENT LLP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prefix\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"OL\",\n          \"TT\",\n          \"OC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bond Number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6573,\n        \"min\": 8,\n        \"max\": 71548,\n        \"num_unique_values\": 14491,\n        \"samples\": [\n          29541,\n          15644,\n          28838\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.45389468816250894,\n        \"min\": 0.0001,\n        \"max\": 1.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.01,\n          0.001,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Branch Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 395,\n        \"min\": 1,\n        \"max\": 1355,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          1,\n          813,\n          941\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Teller\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1825394,\n        \"min\": 1013030,\n        \"max\": 8492239,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          7430841,\n          6830668,\n          6422705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Expired\",\n          \"Paid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2019\",\n          \"2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"04\",\n          \"05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"08\",\n          \"03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quarter\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"2019-Q2\",\n          \"2019-Q3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"buyer_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\"}" id="qjqvVRhUFFBi" outputId="7dd4b65c-3adf-45c6-8382-bd0df03faa1b"}
``` python
print("Total amount of bonds Encashed :",buyer_df['Denominations (INR)'].sum())
```

::: {.output .stream .stdout}
    Total amount of bonds Encashed : 12155.5132
:::
:::

::: {.cell .markdown id="WxEiFpuA8iKh"}
## Top 10 buyers
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":363}" execution="{\"iopub.execute_input\":\"2024-04-17T14:39:16.159883Z\",\"iopub.status.busy\":\"2024-04-17T14:39:16.159161Z\",\"iopub.status.idle\":\"2024-04-17T14:39:16.190751Z\",\"shell.execute_reply\":\"2024-04-17T14:39:16.188937Z\",\"shell.execute_reply.started\":\"2024-04-17T14:39:16.159836Z\"}" id="KkF_U08J8iKi" outputId="b0b8a265-5804-4d25-df1e-a635a5a5f6cf" trusted="true"}
``` python
top_10_buyers = (buyer_df
                 .groupby(by="Name of the Purchaser")
                 .agg({"Denominations (INR)": "sum"})
                 .reset_index()
                 .sort_values("Denominations (INR)", ascending=False, ignore_index=True))[:10]
top_10_buyers
```

::: {.output .execute_result execution_count="259"}
``` json
{"summary":"{\n  \"name\": \"top_10_buyers\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Name of the Purchaser\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"MADANLAL LTD.\",\n          \"MEGHA ENGINEERING AND INFRASTRUCTURES LI MITED\",\n          \"ESSEL MINING AND INDS LTD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 337.5838019827242,\n        \"min\": 183.0,\n        \"max\": 1208.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          185.5,\n          821.0,\n          224.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"top_10_buyers"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":417}" execution="{\"iopub.execute_input\":\"2024-04-17T14:40:11.295127Z\",\"iopub.status.busy\":\"2024-04-17T14:40:11.293455Z\",\"iopub.status.idle\":\"2024-04-17T14:40:11.709397Z\",\"shell.execute_reply\":\"2024-04-17T14:40:11.707787Z\",\"shell.execute_reply.started\":\"2024-04-17T14:40:11.295082Z\"}" id="CKtFmVdD8iKi" outputId="29a19135-037f-41ab-b927-e234aabb9d50" trusted="true"}
``` python
fig, ax = plt.subplots(figsize=(16, 6))

container = ax.barh(y=top_10_buyers['Name of the Purchaser'], width=top_10_buyers['Denominations (INR)'])
ax.set_xlabel('Denominations in crore')
ax.set_ylabel('Name of Purchaser')
ax.invert_yaxis()
```

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/179584db68d2a14349dc5a3ad1da620c2897aaaf.png)
:::
:::

::: {.cell .markdown id="xl7OhqbzgfRR"}
Top 10 buyers are:

1.  FUTURE GAMING AND HOTEL SERVICES PR
2.  MEGHA ENGINEERING AND INFRASTRUCTURES LI MITED
3.  QWIKSUPPLYCHAINPRIVATELIMITED
:::

::: {.cell .markdown id="EBalU-ouGI5R"}
## Yearly and quarterly purchase of electoral bonds
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":237}" id="PYkE6r5A8iKj" outputId="0c7113de-b763-4083-bbc1-1997395e053a"}
``` python
years_df = (buyer_df
                 .groupby(by="Year")
                 .agg({"Denominations (INR)": "sum"})
                 .reset_index())
years_df['Denominations (INR)'] = years_df['Denominations (INR)']
years_df
```

::: {.output .execute_result execution_count="261"}
``` json
{"summary":"{\n  \"name\": \"years_df\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2019\",\n          \"2020\",\n          \"2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1610.4624178081085,\n        \"min\": 363.9601,\n        \"max\": 4246.4745,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1766.128,\n          363.9601,\n          571.8003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"years_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":577}" id="_bOE_KCZGmmq" outputId="1408d2e8-9a31-4737-d907-8ff36b558a00"}
``` python
fig, ax = plt.subplots(figsize=(8, 6))

container = ax.bar(x=years_df['Year'], height=years_df['Denominations (INR)'])
ax.set_ylabel('Denominations in crore')
ax.set_xlabel('Year');
```

::: {.output .execute_result execution_count="262"}
    Text(0.5, 0, 'Year')
:::

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/faa929f4611af64111a6453e9368b4cc5dab3e61.png)
:::
:::

::: {.cell .markdown id="1SpORCc1gyzP"}
In year 2023 maximum in terms of denomination bought.
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":614}" id="KayKIhlWKVm0" outputId="11e6b0be-194b-4b80-b2a4-eccd35a16410"}
``` python
quarter_df = (buyer_df
                 .groupby(by="Quarter")
                 .agg({"Denominations (INR)": "sum"})
                 .reset_index())
quarter_df['Denominations (INR)'] = quarter_df['Denominations (INR)']
quarter_df
```

::: {.output .execute_result execution_count="263"}
``` json
{"summary":"{\n  \"name\": \"quarter_df\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"Quarter\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"2019-Q2\",\n          \"2019-Q3\",\n          \"2021-Q4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 587.0641272163213,\n        \"min\": 42.1,\n        \"max\": 2154.4117,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1488.818,\n          45.38,\n          614.3395\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"quarter_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":620}" id="rQSqXu6W10qV" outputId="c4f0763a-fc3e-4417-c651-fbd38c91a724"}
``` python
fig, ax = plt.subplots(figsize=(12, 6))

container = ax.bar(x=quarter_df['Quarter'], height=quarter_df['Denominations (INR)'])
ax.set_ylabel('Denominations in crore')
ax.set_xlabel('Quarter')
plt.xticks(rotation=45);
```

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/f0e46140cbd06b828dc58550da71e5d2ae80177f.png)
:::
:::

::: {.cell .markdown id="RZ55lCks2UA-"}
## Yearly Top 3 purchaser
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":164}" id="_gRxGh1o5wu2" outputId="85d0f7b6-1ae1-418e-fda0-06bbf2822c00"}
``` python
buyer_df.head(2)
```

::: {.output .execute_result execution_count="265"}
``` json
{"summary":"{\n  \"name\": \"buyer_df\",\n  \"rows\": 18871,\n  \"fields\": [\n    {\n      \"column\": \"rfno\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"1202210000000000000\",\n          \"800202000000000000000\",\n          \"1202200000000000000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Journal Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-12 00:00:00\",\n        \"max\": \"2024-01-11 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-07 00:00:00\",\n          \"2023-01-21 00:00:00\",\n          \"2020-01-18 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Purchase\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-12 00:00:00\",\n        \"max\": \"2024-01-11 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-07 00:00:00\",\n          \"2023-01-21 00:00:00\",\n          \"2020-01-18 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date of Expiry\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-26 00:00:00\",\n        \"max\": \"2024-01-25 00:00:00\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2021-04-21 00:00:00\",\n          \"2023-02-04 00:00:00\",\n          \"2020-02-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name of the Purchaser\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1320,\n        \"samples\": [\n          \"14 REELS PLUS LLP\",\n          \"GREENKO SRI SAI KRISHNA HYDRO ENERGIES PVT LTD\",\n          \"PALM SHELTER ESTATE DEVELOPMENT LLP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prefix\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"OL\",\n          \"TT\",\n          \"OC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bond Number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6573,\n        \"min\": 8,\n        \"max\": 71548,\n        \"num_unique_values\": 14491,\n        \"samples\": [\n          29541,\n          15644,\n          28838\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.45389468816250894,\n        \"min\": 0.0001,\n        \"max\": 1.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.01,\n          0.001,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Branch Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 395,\n        \"min\": 1,\n        \"max\": 1355,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          1,\n          813,\n          941\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Issue Teller\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1825394,\n        \"min\": 1013030,\n        \"max\": 8492239,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          7430841,\n          6830668,\n          6422705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Expired\",\n          \"Paid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2019\",\n          \"2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"04\",\n          \"05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"08\",\n          \"03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quarter\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"2019-Q2\",\n          \"2019-Q3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"buyer_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":424}" id="ViwKDx2O5ivM" outputId="86b77b87-ecf6-4c93-8751-4bd9ac4d4a96"}
``` python
test_df = buyer_df.groupby(['Year', 'Name of the Purchaser']).agg({'Denominations (INR)': 'sum'}).reset_index()
test_df.sort_values(by=['Year', 'Denominations (INR)'], ascending=[True, False], inplace=True, ignore_index=True)
test_df
```

::: {.output .execute_result execution_count="266"}
``` json
{"summary":"{\n  \"name\": \"test_df\",\n  \"rows\": 1592,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2019\",\n          \"2020\",\n          \"2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name of the Purchaser\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1320,\n        \"samples\": [\n          \"DANIKA TRADERS PRIVATE LTD\",\n          \"DALMIA BHARAT SUGAR AND INDUSTRIES LTD\",\n          \"MICRO LABS LTD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.116268676772894,\n        \"min\": 0.0001,\n        \"max\": 415.0,\n        \"num_unique_values\": 221,\n        \"samples\": [\n          14.25,\n          0.38,\n          13.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"test_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":614}" id="fmkbl6H_Hud4" outputId="3fcc3977-510f-48e4-f3d7-c2ccd3ff447f"}
``` python
yearly_df = test_df.groupby('Year').apply(lambda x: x.nlargest(3, 'Denominations (INR)')).reset_index(drop=True)
yearly_df
```

::: {.output .execute_result execution_count="267"}
``` json
{"summary":"{\n  \"name\": \"yearly_df\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2019\",\n          \"2020\",\n          \"2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name of the Purchaser\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"ESSEL MINING AND INDS LTD\",\n          \"KEVENTER FOODPARK INFRA LIMITED\",\n          \"BHARTI AIRTEL LIMITED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127.71603829554257,\n        \"min\": 20.0,\n        \"max\": 415.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          195.0,\n          185.5,\n          20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"yearly_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":1000}" id="w_hp6kGDO4DF" outputId="13c74145-6302-4a49-d674-9cf491131113"}
``` python
import matplotlib.pyplot as plt
for year in yearly_df['Year'].unique():
    temp_df = yearly_df[yearly_df['Year'] == year]
    fig, ax = plt.subplots(figsize=(6, 2))
    container = ax.barh(y=temp_df['Name of the Purchaser'], width=temp_df['Denominations (INR)'])
    ax.set_xlabel('Denominations in crore')
    ax.set_ylabel('Name of the Purchaser')
    ax.set_title(f'Top 3 Purchasers in {year}')
    ax.invert_yaxis()
    plt.show()
```

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/97df0a690eb6b5fc71a23a451debd2272ca7410a.png)
:::

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/f9e245ba5ccdc69ce3223d2db035e7dec0b00fa9.png)
:::

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/1e7bd1100e0b14da9d525c130cd32afb46e95eaa.png)
:::

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/79042fc0a404aaaf8314895f8f3ee91b0468ef5a.png)
:::

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/701dca9eda8be0d64170225392c26399214953ed.png)
:::

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/2394904b0f9e8a29025eda326d970842d46e35ef.png)
:::
:::

::: {.cell .markdown id="7-68lB71eyrO"}
## Import dataset of receivers
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":206}" id="HVJl1b_iRCpU" outputId="e5cd0d89-c6a7-484f-ccce-ee68379b2aec"}
``` python
receiver_df = pd.read_csv('/content/sample_data/EB_Redemptions_Updated.csv')
receiver_df.drop('Sr No.', axis=1, inplace=True)
receiver_df.head()
```

::: {.output .execute_result execution_count="269"}
``` json
{"summary":"{\n  \"name\": \"receiver_df\",\n  \"rows\": 20421,\n  \"fields\": [\n    {\n      \"column\": \"Date of Encashment\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 230,\n        \"samples\": [\n          \"8-Jan-24\",\n          \"9-Apr-21\",\n          \"26-Apr-19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name of the Political Party\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"JANATA DAL ( SECULAR )\",\n          \"JHARKHAND MUKTI MORCHA\",\n          \"ALL INDIA ANNA DRAVIDA MUNNETRA KAZHAGAM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Account no. of Political Party\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"*******3286\",\n          \"*******5076\",\n          \"*******5199\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prefix\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"TL\",\n          \"OT\",\n          \"OL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bond Number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6525,\n        \"min\": 10,\n        \"max\": 71548,\n        \"num_unique_values\": 15296,\n        \"samples\": [\n          4733,\n          7863,\n          13687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"10,00,000\",\n          \"1,000\",\n          \"1,00,000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pay Branch Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 297,\n        \"min\": 1,\n        \"max\": 2295,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          509,\n          2295,\n          800\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pay Teller\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1953103,\n        \"min\": 149845,\n        \"max\": 8212066,\n        \"num_unique_values\": 87,\n        \"samples\": [\n          6391354,\n          2770121,\n          3303527\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"receiver_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\"}" id="iVTfH_5RSu5b" outputId="1fd04d0c-c40e-40ff-bdd6-303bafb435f7"}
``` python
receiver_df.info()
```

::: {.output .stream .stdout}
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 20421 entries, 0 to 20420
    Data columns (total 8 columns):
     #   Column                          Non-Null Count  Dtype 
    ---  ------                          --------------  ----- 
     0   Date of Encashment              20421 non-null  object
     1   Name of the Political Party     20421 non-null  object
     2   Account no. of Political Party  20421 non-null  object
     3   Prefix                          20421 non-null  object
     4   Bond Number                     20421 non-null  int64 
     5   Denominations (INR)             20421 non-null  object
     6   Pay Branch Code                 20421 non-null  int64 
     7   Pay Teller                      20421 non-null  int64 
    dtypes: int64(3), object(5)
    memory usage: 1.2+ MB
:::
:::

::: {.cell .code id="xUnBMq1xS2R0"}
``` python
receiver_df['Date of Encashment'] = pd.to_datetime(receiver_df['Date of Encashment'], format="%d-%b-%y")
receiver_df['Year'] = receiver_df['Date of Encashment'].dt.strftime('%Y')
receiver_df['Month'] = receiver_df['Date of Encashment'].dt.strftime('%m')
receiver_df['Day'] = receiver_df['Date of Encashment'].dt.strftime('%d')
receiver_df['Quarter'] = receiver_df['Date of Encashment'].dt.to_period('Q').dt.strftime('%Y-Q%q')
```
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":310}" id="0edIM59yUEeC" outputId="1e0eac8f-2f6d-43dd-b688-31d39940f174"}
``` python
receiver_df['Denominations (INR)'] = receiver_df['Denominations (INR)'].apply(lambda x: x.replace(',', ''))
receiver_df['Denominations (INR)'] = pd.to_numeric(receiver_df['Denominations (INR)'])
receiver_df['Denominations (INR)'] = receiver_df['Denominations (INR)'].divide(10000000)
receiver_df.head()
```

::: {.output .execute_result execution_count="272"}
``` json
{"summary":"{\n  \"name\": \"receiver_df\",\n  \"rows\": 20421,\n  \"fields\": [\n    {\n      \"column\": \"Date of Encashment\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-04-12 00:00:00\",\n        \"max\": \"2024-01-24 00:00:00\",\n        \"num_unique_values\": 230,\n        \"samples\": [\n          \"2024-01-08 00:00:00\",\n          \"2021-04-09 00:00:00\",\n          \"2019-04-26 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name of the Political Party\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"JANATA DAL ( SECULAR )\",\n          \"JHARKHAND MUKTI MORCHA\",\n          \"ALL INDIA ANNA DRAVIDA MUNNETRA KAZHAGAM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Account no. of Political Party\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"*******3286\",\n          \"*******5076\",\n          \"*******5199\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prefix\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"TL\",\n          \"OT\",\n          \"OL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bond Number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6525,\n        \"min\": 10,\n        \"max\": 71548,\n        \"num_unique_values\": 15296,\n        \"samples\": [\n          4733,\n          7863,\n          13687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.45763212143895193,\n        \"min\": 0.0001,\n        \"max\": 1.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1,\n          0.0001,\n          0.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pay Branch Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 297,\n        \"min\": 1,\n        \"max\": 2295,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          509,\n          2295,\n          800\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pay Teller\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1953103,\n        \"min\": 149845,\n        \"max\": 8212066,\n        \"num_unique_values\": 87,\n        \"samples\": [\n          6391354,\n          2770121,\n          3303527\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2019\",\n          \"2020\",\n          \"2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"05\",\n          \"02\",\n          \"04\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          \"31\",\n          \"08\",\n          \"05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quarter\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"2019-Q2\",\n          \"2019-Q3\",\n          \"2021-Q4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"receiver_df"}
```
:::
:::

::: {.cell .code execution_count="284" colab="{\"base_uri\":\"https://localhost:8080/\"}" id="bnvIHDpIUW5S" outputId="1de3d6f3-1913-4150-dd16-e6cf5837f21e"}
``` python
# list of political party which encashed electoral bonds
print(receiver_df['Name of the Political Party'].unique())
print(receiver_df['Name of the Political Party'].nunique())
```

::: {.output .stream .stdout}
    ['ALL INDIA ANNA DRAVIDA MUNNETRA KAZHAGAM' 'BHARAT RASHTRA SAMITHI'
     'BHARATIYA JANATA PARTY' 'PRESIDENT, ALL INDIA CONGRESS COMMITTEE'
     'SHIVSENA' 'TELUGU DESAM PARTY'
     'YSR  CONGRESS PARTY  (YUVAJANA SRAMIKA RYTHU CONGRESS PARTY)'
     'DRAVIDA MUNNETRA KAZHAGAM (DMK)' 'JANATA DAL ( SECULAR )'
     'NATIONALIST CONGRESS PARTY MAHARASHTRA PRADESH'
     'ALL INDIA TRINAMOOL CONGRESS' 'BIHAR PRADESH JANTA DAL(UNITED)'
     'RASHTRIYA JANTA DAL' 'AAM AADMI PARTY' 'ADYAKSHA SAMAJVADI PARTY'
     'SHIROMANI AKALI DAL' 'JHARKHAND MUKTI MORCHA'
     'JAMMU AND KASHMIR NATIONAL CONFERENCE' 'BIJU JANATA DAL'
     'GOA FORWARD PARTY' 'MAHARASHTRAWADI GOMNTAK PARTY'
     'SIKKIM KRANTIKARI MORCHA' 'JANASENA PARTY' 'SIKKIM DEMOCRATIC FRONT']
    24
:::
:::

::: {.cell .markdown id="Sz_TXcqZfBYp"}
## top political party in terms of electoral bond enchased
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":802}" id="ZXP4uBAAUrS0" outputId="c189a965-4872-4c62-ce3b-af5ec66fa5f0"}
``` python
top_receiver_df = receiver_df.groupby(by='Name of the Political Party').agg({'Denominations (INR)': 'sum'}).reset_index()
top_receiver_df.sort_values(by='Denominations (INR)',ascending=False, inplace=True, ignore_index=True)
top_receiver_df
```

::: {.output .execute_result execution_count="274"}
``` json
{"summary":"{\n  \"name\": \"top_receiver_df\",\n  \"rows\": 24,\n  \"fields\": [\n    {\n      \"column\": \"Name of the Political Party\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"SHIVSENA\",\n          \"BIHAR PRADESH JANTA DAL(UNITED)\",\n          \"BHARATIYA JANATA PARTY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1272.37337582315,\n        \"min\": 0.35000000000000003,\n        \"max\": 6060.5111,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          159.3814,\n          14.0,\n          6060.5111\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"top_receiver_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":452}" id="RdA3s-_oWlgT" outputId="82d4b6c3-8411-456e-f2fc-29f8324574e0"}
``` python
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(12, 6))

container = ax.barh(y=top_receiver_df['Name of the Political Party'][:10], width=top_receiver_df['Denominations (INR)'][:10])
ax.set_xlabel('Denominations in crore')
ax.set_ylabel('Name of Political Party')
ax.invert_yaxis()
```

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/9b87cb6aae4993037ec39d52f490aba65c0749f0.png)
:::
:::

::: {.cell .markdown id="wHtajkUyhXde"}
Top 3 political parties are:

1.  BHARATIYA JANATA PARTY
2.  ALL INDIA TRINAMOOL CONGRESS
3.  PRESIDENT, ALL INDIA CONGRESS COMMITTEE
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":474}" id="pDqhOauHbM7e" outputId="5b8be9c3-d2f2-4f31-cebe-6843bc199025"}
``` python
import matplotlib.pyplot as plt

# Extract top 10 parties from top_receiver_df
top_10_parties = top_receiver_df[:8]['Name of the Political Party']

# Extract denominations for top 10 parties
top_10_denominations = top_receiver_df[:8]['Denominations (INR)']

# Create a pie chart
fig, ax = plt.subplots()
ax.pie(top_10_denominations, labels=top_10_parties, autopct="%1.1f%%", startangle=40)

# Equal aspect ratio ensures a circular pie chart
ax.axis('equal')

# Add title
ax.set_title("Top 10 Political Parties by Electoral Bond Encashment")

# Show the pie chart
plt.show()
```

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/c7f8321984e315f03a59117d78b48752076aa0ff.png)
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":237}" id="KswvgC8nXWLl" outputId="dc3b36c0-fe6c-45fe-8651-5d4233f6f8db"}
``` python
years_df = (receiver_df
                 .groupby(by="Year")
                 .agg({"Denominations (INR)": "sum"})
                 .reset_index())
years_df['Denominations (INR)'] = years_df['Denominations (INR)']
years_df
```

::: {.output .execute_result execution_count="277"}
``` json
{"summary":"{\n  \"name\": \"years_df\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2019\",\n          \"2020\",\n          \"2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1609.939564707638,\n        \"min\": 363.96,\n        \"max\": 4246.2713,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2385.0886,\n          363.96,\n          570.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"years_df"}
```
:::
:::

::: {.cell .markdown id="dUxrmIoFfOVl"}
## Yealy and Quarterly plot
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":560}" id="wnBAc3JLXbgZ" outputId="a473d63f-b4ed-44f9-e0e9-4b4586774411"}
``` python
fig, ax = plt.subplots(figsize=(8, 6))

container = ax.bar(x=years_df['Year'], height=years_df['Denominations (INR)'])
ax.set_ylabel('Denominations in crore')
ax.set_xlabel('Year');
```

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/4332abff9c6bfc51ccbcffc70b4c4dc4b51a8f1f.png)
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":614}" id="aHY9MC0FXcKX" outputId="5a683999-b40f-4f81-9924-f0e63cdcf5f8"}
``` python
quarter_df = (receiver_df
                 .groupby(by="Quarter")
                 .agg({"Denominations (INR)": "sum"})
                 .reset_index())
quarter_df['Denominations (INR)'] = quarter_df['Denominations (INR)']
quarter_df
```

::: {.output .execute_result execution_count="279"}
``` json
{"summary":"{\n  \"name\": \"quarter_df\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"Quarter\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"2019-Q2\",\n          \"2019-Q3\",\n          \"2021-Q4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Denominations (INR)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 651.8491255158785,\n        \"min\": 42.07,\n        \"max\": 2154.4112,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          2107.7786,\n          45.38,\n          614.3395\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"quarter_df"}
```
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":620}" id="Ppi4hv8nXrvR" outputId="fdb11950-7eab-4e67-acab-f110ba0374c9"}
``` python
fig, ax = plt.subplots(figsize=(12, 6))

container = ax.bar(x=quarter_df['Quarter'], height=quarter_df['Denominations (INR)'])
ax.set_ylabel('Denominations in crore')
ax.set_xlabel('Quarter')
plt.xticks(rotation=45);
```

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/ceb611eaa88308da89901f1ddc9308b0332276a6.png)
:::
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\"}" id="urZqCgtlYiic" outputId="59b0190c-b046-4bb5-f44c-89c35ac9f69e"}
``` python
receiver_df['Name of the Political Party'].unique()
```

::: {.output .execute_result execution_count="281"}
    array(['ALL INDIA ANNA DRAVIDA MUNNETRA KAZHAGAM',
           'BHARAT RASHTRA SAMITHI', 'BHARATIYA JANATA PARTY',
           'PRESIDENT, ALL INDIA CONGRESS COMMITTEE', 'SHIVSENA',
           'TELUGU DESAM PARTY',
           'YSR  CONGRESS PARTY  (YUVAJANA SRAMIKA RYTHU CONGRESS PARTY)',
           'DRAVIDA MUNNETRA KAZHAGAM (DMK)', 'JANATA DAL ( SECULAR )',
           'NATIONALIST CONGRESS PARTY MAHARASHTRA PRADESH',
           'ALL INDIA TRINAMOOL CONGRESS', 'BIHAR PRADESH JANTA DAL(UNITED)',
           'RASHTRIYA JANTA DAL', 'AAM AADMI PARTY',
           'ADYAKSHA SAMAJVADI PARTY', 'SHIROMANI AKALI DAL',
           'JHARKHAND MUKTI MORCHA', 'JAMMU AND KASHMIR NATIONAL CONFERENCE',
           'BIJU JANATA DAL', 'GOA FORWARD PARTY',
           'MAHARASHTRAWADI GOMNTAK PARTY', 'SIKKIM KRANTIKARI MORCHA',
           'JANASENA PARTY', 'SIKKIM DEMOCRATIC FRONT'], dtype=object)
:::
:::

::: {.cell .markdown id="PxgVVB31fb91"}
## Comparision of bjp, tmc and congress on quarterly basis
:::

::: {.cell .code colab="{\"base_uri\":\"https://localhost:8080/\",\"height\":620}" id="KNyUGxj6YEUk" outputId="090e9e4e-149e-4f78-c2e5-bba6550f3190"}
``` python
bjp_df = receiver_df[receiver_df['Name of the Political Party'] == 'BHARATIYA JANATA PARTY']
tmc_df = receiver_df[receiver_df['Name of the Political Party'] == 'ALL INDIA TRINAMOOL CONGRESS']
congress_df = receiver_df[receiver_df['Name of the Political Party'] == 'PRESIDENT, ALL INDIA CONGRESS COMMITTEE']

bjp_quarter_df = bjp_df.groupby('Quarter').agg({'Denominations (INR)': 'sum'}).reset_index()
tmc_quarter_df = tmc_df.groupby('Quarter').agg({'Denominations (INR)': 'sum'}).reset_index()
congress_quarter_df = congress_df.groupby('Quarter').agg({'Denominations (INR)': 'sum'}).reset_index()

fig, ax = plt.subplots(figsize=(12, 6))

ax.plot(bjp_quarter_df['Quarter'], bjp_quarter_df['Denominations (INR)'], label='BJP')
ax.plot(tmc_quarter_df['Quarter'], tmc_quarter_df['Denominations (INR)'], label='TMC')
ax.plot(congress_quarter_df['Quarter'], congress_quarter_df['Denominations (INR)'], label='Congress')

ax.set_xlabel('Quarter')
ax.set_ylabel('Denominations (INR) in crore')
ax.legend()
plt.xticks(rotation=45);
```

::: {.output .display_data}
![](vertopal_07776bbd106b43949c94ad2e27277b42/783eb7305c5c77a91a18e1df16a470c223d81d68.png)
:::
:::

::: {.cell .code id="WwguvkfTZwGG"}
``` python
```
:::
